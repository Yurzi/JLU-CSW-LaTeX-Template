@inproceedings{akshayKnowledgeCompilationBoolean2019,
  title = {Knowledge {{Compilation}} for {{Boolean Functional Synthesis}}},
  booktitle = {2019 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  author = {Akshay, S. and Arora, Jatin and Chakraborty, Supratik and Krishna, S. and Raghunathan, Divya and Shah, Shetal},
  date = {2019-10},
  pages = {161--169},
  publisher = {IEEE},
  location = {San Jose, CA, USA},
  doi = {10.23919/FMCAD.2019.8894266},
  url = {https://ieeexplore.ieee.org/document/8894266/},
  urldate = {2023-11-14},
  eventtitle = {2019 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  isbn = {978-0-9835678-9-9},
  file = {/home/yurzi/Sync/Zotero/storage/GQ8LZVD5/Akshay et al_2019_Knowledge Compilation for Boolean Functional Synthesis.pdf}
}

@incollection{akshayParallelBooleanFunctional2017,
  title = {Towards {{Parallel Boolean Functional Synthesis}}},
  booktitle = {Tools and {{Algorithms}} for the {{Construction}} and {{Analysis}} of {{Systems}}},
  author = {Akshay, S. and Chakraborty, Supratik and John, Ajith K. and Shah, Shetal},
  editor = {Legay, Axel and Margaria, Tiziana},
  date = {2017},
  volume = {10205},
  pages = {337--353},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-662-54577-5_19},
  url = {https://link.springer.com/10.1007/978-3-662-54577-5_19},
  urldate = {2023-11-14},
  isbn = {978-3-662-54576-8 978-3-662-54577-5},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/5MGHGQGD/Akshay et al_2017_Towards Parallel Boolean Functional Synthesis.pdf}
}

@incollection{akshayWhatHardBoolean2018,
  title = {What’s {{Hard About Boolean Functional Synthesis}}?},
  booktitle = {Computer {{Aided Verification}}},
  author = {Akshay, S. and Chakraborty, Supratik and Goel, Shubham and Kulal, Sumith and Shah, Shetal},
  editor = {Chockler, Hana and Weissenbacher, Georg},
  date = {2018},
  volume = {10981},
  pages = {251--269},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-96145-3_14},
  url = {http://link.springer.com/10.1007/978-3-319-96145-3_14},
  urldate = {2023-11-14},
  isbn = {978-3-319-96144-6 978-3-319-96145-3},
  file = {/home/yurzi/Sync/Zotero/storage/72HT2EJZ/Akshay et al_2018_What’s Hard About Boolean Functional Synthesis.pdf}
}

@article{balabanovUnifiedQBFCertification2012,
  title = {Unified {{QBF}} Certification and Its Applications},
  author = {Balabanov, Valeriy and Jiang, Jie-Hong R.},
  date = {2012-08},
  journaltitle = {Formal Methods in System Design},
  shortjournal = {Form Methods Syst Des},
  volume = {41},
  number = {1},
  pages = {45--65},
  issn = {0925-9856, 1572-8102},
  doi = {10.1007/s10703-012-0152-6},
  url = {http://link.springer.com/10.1007/s10703-012-0152-6},
  urldate = {2023-11-14},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/358FSFUA/Balabanov_Jiang_2012_Unified QBF certification and its applications.pdf}
}

@online{belcakNeuralCombinatorialLogic2022,
  title = {Neural {{Combinatorial Logic Circuit Synthesis}} from {{Input-Output Examples}}},
  author = {Belcak, Peter and Wattenhofer, Roger},
  date = {2022-10-29},
  eprint = {2210.16606},
  eprinttype = {arxiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2210.16606},
  urldate = {2023-12-26},
  abstract = {We propose a novel, fully explainable neural approach to synthesis of combinatorial logic circuits from input-output examples. The carrying advantage of our method is that it readily extends to inductive scenarios, where the set of examples is incomplete but still indicative of the desired behaviour. Our method can be employed for a virtually arbitrary choice of atoms - from logic gates to FPGA blocks - as long as they can be formulated in a differentiable fashion, and consistently yields good results for synthesis of practical circuits of increasing size. In particular, we succeed in learning a number of arithmetic, bitwise, and signal-routing operations, and even generalise towards the correct behaviour in inductive scenarios. Our method, attacking a discrete logical synthesis problem with an explainable neural approach, hints at a wider promise for synthesis and reasoning-related tasks.},
  pubstate = {preprint},
  keywords = {Computer Science - Artificial Intelligence,Computer Science - Machine Learning,Computer Science - Symbolic Computation},
  file = {/home/yurzi/Sync/Zotero/storage/U7XYUYHM/Belcak_Wattenhofer_2022_Neural Combinatorial Logic Circuit Synthesis from Input-Output Examples.pdf;/home/yurzi/Sync/Zotero/storage/BN6RIY7D/2210.html}
}

@incollection{beyersdorffQBFFamToolGenerating2021,
  title = {{{QBFFam}}: {{A Tool}} for {{Generating QBF Families}} from {{Proof Complexity}}},
  shorttitle = {{{QBFFam}}},
  booktitle = {Theory and {{Applications}} of {{Satisfiability Testing}} – {{SAT}} 2021},
  author = {Beyersdorff, Olaf and Pulina, Luca and Seidl, Martina and Shukla, Ankit},
  editor = {Li, Chu-Min and Manyà, Felip},
  date = {2021},
  volume = {12831},
  pages = {21--29},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-80223-3_3},
  url = {https://link.springer.com/10.1007/978-3-030-80223-3_3},
  urldate = {2024-04-08},
  isbn = {978-3-030-80222-6 978-3-030-80223-3},
  langid = {english}
}

@book{booleMathematicalAnalysisLogic1998,
  title = {The Mathematical Analysis of Logic: Being an Essay towards a Calculus of Deductive Reasoning},
  shorttitle = {The Mathematical Analysis of Logic},
  author = {Boole, George and Slater, John},
  date = {1998},
  series = {Key Texts},
  edition = {Repr. from the 1847 ed},
  publisher = {Thoemmes},
  location = {Bristol},
  isbn = {978-1-85506-583-3},
  langid = {english},
  pagetotal = {82},
  file = {/home/yurzi/Sync/Zotero/storage/NFDURGHV/Boole_Slater_1998_The mathematical analysis of logic.pdf}
}

@incollection{friedBDDBasedBooleanFunctional2016,
  title = {{{BDD-Based Boolean Functional Synthesis}}},
  booktitle = {Computer {{Aided Verification}}},
  author = {Fried, Dror and Tabajara, Lucas M. and Vardi, Moshe Y.},
  editor = {Chaudhuri, Swarat and Farzan, Azadeh},
  date = {2016},
  volume = {9780},
  pages = {402--421},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-319-41540-6_22},
  url = {http://link.springer.com/10.1007/978-3-319-41540-6_22},
  urldate = {2023-11-14},
  isbn = {978-3-319-41539-0 978-3-319-41540-6},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/U6F9ILWA/Fried et al_2016_BDD-Based Boolean Functional Synthesis.pdf}
}

@inproceedings{fuExtractingLogicCircuit2007,
  title = {Extracting {{Logic Circuit Structure}} from {{Conjunctive Normal Form Descriptions}}},
  booktitle = {20th {{International Conference}} on {{VLSI Design}} Held Jointly with 6th {{International Conference}} on {{Embedded Systems}} ({{VLSID}}'07)},
  author = {Fu, Zhaohui and Malik, Sharad},
  date = {2007},
  pages = {37--42},
  publisher = {IEEE},
  location = {Bangalore, India},
  doi = {10.1109/VLSID.2007.81},
  url = {http://ieeexplore.ieee.org/document/4092020/},
  urldate = {2023-11-14},
  eventtitle = {20th {{International Conference}} on {{VLSI Design}} Held Jointly with 6th {{International Conference}} on {{Embedded Systems}} ({{VLSID}}'07)},
  isbn = {978-0-7695-2762-8},
  file = {/home/yurzi/Sync/Zotero/storage/JBYPFUB7/Fu_Malik_2007_Extracting Logic Circuit Structure from Conjunctive Normal Form Descriptions.pdf}
}

@inproceedings{goliaEngineeringEfficientBoolean2021,
  title = {Engineering an {{Efficient Boolean Functional Synthesis Engine}}},
  booktitle = {2021 {{IEEE}}/{{ACM International Conference On Computer Aided Design}} ({{ICCAD}})},
  author = {Golia, Priyanka and Slivovsky, Friedrich and Roy, Subhajit and Meel, Kuldeep S.},
  date = {2021-11-01},
  pages = {1--9},
  publisher = {IEEE},
  location = {Munich, Germany},
  doi = {10.1109/ICCAD51958.2021.9643583},
  url = {https://ieeexplore.ieee.org/document/9643583/},
  urldate = {2023-11-14},
  abstract = {Given a Boolean specification between a set of inputs and outputs, the problem of Boolean functional synthesis is to synthesise each output as a function of inputs such that the specification is met. Although the past few years have witnessed intense algorithmic development, accomplishing scalability remains the holy grail. The stateof-the-art approach combines machine learning and automated reasoning to synthesise Boolean functions efficiently. In this paper, we propose four algorithmic improvements for a data-driven framework for functional synthesis: using a dependency-driven multi-classifier to learn candidate function, extracting uniquely defined functions by interpolation, variables retention, and using lexicographic MaxSAT to repair candidates.},
  eventtitle = {2021 {{IEEE}}/{{ACM International Conference On Computer Aided Design}} ({{ICCAD}})},
  isbn = {978-1-66544-507-8},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/BBGMJRHE/Golia et al_2021_Engineering an Efficient Boolean Functional Synthesis Engine.pdf}
}

@incollection{goliaManthanDataDrivenApproach2020,
  title = {Manthan: {{A Data-Driven Approach}} for {{Boolean Function Synthesis}}},
  shorttitle = {Manthan},
  booktitle = {Computer {{Aided Verification}}},
  author = {{Priyanka Golia} and Roy, Subhajit and Meel, Kuldeep S.},
  editor = {Lahiri, Shuvendu K. and Wang, Chao},
  date = {2020},
  volume = {12225},
  pages = {611--633},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-53291-8_31},
  url = {http://link.springer.com/10.1007/978-3-030-53291-8_31},
  urldate = {2023-11-14},
  abstract = {Boolean functional synthesis is a fundamental problem in computer science with wide-ranging applications and has witnessed a surge of interest resulting in progressively improved techniques over the past decade. Despite intense algorithmic development, a large number of problems remain beyond the reach of the state of the art techniques.},
  isbn = {978-3-030-53290-1 978-3-030-53291-8},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/8JUPBCR8/Golia et al_2020_Manthan.pdf}
}

@incollection{jiangQuantifierEliminationFunctional2009,
  title = {Quantifier {{Elimination}} via {{Functional Composition}}},
  booktitle = {Computer {{Aided Verification}}},
  author = {Jiang, Jie-Hong R.},
  editor = {Bouajjani, Ahmed and Maler, Oded},
  date = {2009},
  volume = {5643},
  pages = {383--397},
  publisher = {Springer Berlin Heidelberg},
  location = {Berlin, Heidelberg},
  doi = {10.1007/978-3-642-02658-4_30},
  url = {http://link.springer.com/10.1007/978-3-642-02658-4_30},
  urldate = {2023-11-14},
  isbn = {978-3-642-02657-7 978-3-642-02658-4},
  file = {/home/yurzi/Sync/Zotero/storage/PTI2UIQQ/Jiang_2009_Quantifier Elimination via Functional Composition.pdf}
}

@article{joseCauseClueClauses2011,
  title = {Cause Clue Clauses: Error Localization Using Maximum Satisfiability},
  shorttitle = {Cause Clue Clauses},
  author = {Jose, Manu and Majumdar, Rupak},
  date = {2011-06-04},
  journaltitle = {ACM SIGPLAN Notices},
  shortjournal = {SIGPLAN Not.},
  volume = {46},
  number = {6},
  pages = {437--446},
  issn = {0362-1340, 1558-1160},
  doi = {10.1145/1993316.1993550},
  url = {https://dl.acm.org/doi/10.1145/1993316.1993550},
  urldate = {2023-11-14},
  abstract = {Much effort is spent by programmers everyday in trying to reduce long, failing execution traces to the               cause               of the error. We present an algorithm for error cause localization based on a reduction to the maximal satisfiability problem (MAX-SAT), which asks what is the maximum number of clauses of a Boolean formula that can be simultaneously satisfied by an assignment. At an intuitive level, our algorithm takes as input a program and a failing test, and comprises the following three steps. First, using bounded model checking, and a bound obtained from the execution of the test, we encode the semantics of a bounded unrolling of the program as a Boolean               trace formula               . Second, for a failing program execution (e.g., one that violates an assertion or a post-condition), we construct an               unsatisfiable               formula by taking the formula and additionally asserting that the input is the failing test and that the assertion condition does hold at the end. Third, using MAX-SAT, we find a maximal set of clauses in this formula that can be satisfied together, and output the complement set as a potential cause of the error.                          We have implemented our algorithm in a tool called BugAssist that performs error localization for C programs. We demonstrate the effectiveness of BugAssist on a set of benchmark examples with injected faults, and show that in most cases, BugAssist can quickly and precisely isolate a few lines of code whose change eliminates the error. We also demonstrate how our algorithm can be modified to automatically suggest fixes for common classes of errors such as off-by-one.We have implemented our algorithm in a tool called BugAssist that performs error localization for C programs. We demonstrate the effectiveness of BugAssist on a set of benchmark examples with injected faults, and show that in most cases, BugAssist can quickly and precisely isolate a few lines of code whose change eliminates the error. We also demonstrate how our algorithm can be modified to automatically suggest fixes for common classes of errors such as off-by-one.},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/VSKUAKII/Jose_Majumdar_2011_Cause clue clauses.pdf}
}

@incollection{rabeIncrementalDeterminizationQuantifier2019,
  title = {Incremental {{Determinization}} for {{Quantifier Elimination}} and {{Functional Synthesis}}},
  booktitle = {Computer {{Aided Verification}}},
  author = {Rabe, Markus N.},
  editor = {Dillig, Isil and Tasiran, Serdar},
  date = {2019},
  volume = {11562},
  pages = {84--94},
  publisher = {Springer International Publishing},
  location = {Cham},
  doi = {10.1007/978-3-030-25543-5_6},
  url = {http://link.springer.com/10.1007/978-3-030-25543-5_6},
  urldate = {2023-11-14},
  isbn = {978-3-030-25542-8 978-3-030-25543-5},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/HSDMMARR/Rabe_2019_Incremental Determinization for Quantifier Elimination and Functional Synthesis.pdf}
}

@online{rajaBNSynthBoundedBoolean2022,
  title = {{{BNSynth}}: {{Bounded Boolean Functional Synthesis}}},
  shorttitle = {{{BNSynth}}},
  author = {Raja, Ravi and Samuel, Stanly and Bhattacharyya, Chiranjib and D'Souza, Deepak and Kanade, Aditya},
  date = {2022-12-15},
  eprint = {2212.08170},
  eprinttype = {arxiv},
  eprintclass = {cs},
  url = {http://arxiv.org/abs/2212.08170},
  urldate = {2024-04-08},
  abstract = {The automated synthesis of correct-by-construction Boolean functions from logical specifications is known as the Boolean Functional Synthesis (BFS) problem. BFS has many application areas that range from software engineering to circuit design. In this paper, we introduce a tool BNSynth, that is the first to solve the BFS problem under a given bound on the solution space. Bounding the solution space induces the synthesis of smaller functions that benefit resource constrained areas such as circuit design. BNSynth uses a counter-example guided, neural approach to solve the bounded BFS problem. Initial results show promise in synthesizing smaller solutions; we observe at least \textbackslash textbf\{3.2X\} (and up to \textbackslash textbf\{24X\}) improvement in the reduction of solution size on average, as compared to state of the art tools on our benchmarks. BNSynth is available on GitHub under an open source license.},
  pubstate = {preprint},
  keywords = {B.6.0,Computer Science - Artificial Intelligence,Computer Science - Logic in Computer Science,Computer Science - Machine Learning,Computer Science - Symbolic Computation,I.2.2,I.2.6},
  file = {/home/yurzi/Sync/Zotero/storage/ESKKNVYH/Raja et al_2022_BNSynth.pdf;/home/yurzi/Sync/Zotero/storage/MDT7Z8BQ/2212.html}
}

@article{srivastavaTemplatebasedProgramVerification2013,
  title = {Template-Based Program Verification and Program Synthesis},
  author = {Srivastava, Saurabh and Gulwani, Sumit and Foster, Jeffrey S.},
  date = {2013-10},
  journaltitle = {International Journal on Software Tools for Technology Transfer},
  shortjournal = {Int J Softw Tools Technol Transfer},
  volume = {15},
  number = {5-6},
  pages = {497--518},
  issn = {1433-2779, 1433-2787},
  doi = {10.1007/s10009-012-0223-4},
  url = {http://link.springer.com/10.1007/s10009-012-0223-4},
  urldate = {2023-11-14},
  langid = {english},
  file = {/home/yurzi/Sync/Zotero/storage/S475LK75/Srivastava et al_2013_Template-based program verification and program synthesis.pdf}
}

@inproceedings{tabajaraFactoredBooleanFunctional2017,
  title = {Factored Boolean Functional Synthesis},
  booktitle = {2017 {{Formal Methods}} in {{Computer Aided Design}} ({{FMCAD}})},
  author = {Tabajara, Lucas M. and Vardi, Moshe Y.},
  date = {2017-10},
  pages = {124--131},
  publisher = {IEEE},
  location = {Vienna},
  doi = {10.23919/FMCAD.2017.8102250},
  url = {http://ieeexplore.ieee.org/document/8102250/},
  urldate = {2023-11-14},
  eventtitle = {2017 {{Formal Methods}} in {{Computer-Aided Design}} ({{FMCAD}})},
  isbn = {978-0-9835678-7-5},
  file = {/home/yurzi/Sync/Zotero/storage/HBFA6AMK/Tabajara_Vardi_2017_Factored boolean functional synthesis.pdf}
}
